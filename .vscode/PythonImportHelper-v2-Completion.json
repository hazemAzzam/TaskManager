[
    {
        "label": "database.utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database.utils",
        "description": "database.utils",
        "detail": "database.utils",
        "documentation": {}
    },
    {
        "label": "user_profile_picture_path",
        "importPath": "database.utils",
        "description": "database.utils",
        "isExtraImport": true,
        "detail": "database.utils",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "StatusChoices",
        "importPath": "database.constants",
        "description": "database.constants",
        "isExtraImport": true,
        "detail": "database.constants",
        "documentation": {}
    },
    {
        "label": "PriorityChoices",
        "importPath": "database.constants",
        "description": "database.constants",
        "isExtraImport": true,
        "detail": "database.constants",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TaskModel",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "TaskModel",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "PageNumberPagination",
        "importPath": "rest_framework.pagination",
        "description": "rest_framework.pagination",
        "isExtraImport": true,
        "detail": "rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "TaskModelSerializer",
        "importPath": "database.serializers",
        "description": "database.serializers",
        "isExtraImport": true,
        "detail": "database.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "database.serializers",
        "description": "database.serializers",
        "isExtraImport": true,
        "detail": "database.serializers",
        "documentation": {}
    },
    {
        "label": "UserAutocompleteSerializer",
        "importPath": "database.serializers",
        "description": "database.serializers",
        "isExtraImport": true,
        "detail": "database.serializers",
        "documentation": {}
    },
    {
        "label": "UserProfilePictureSerializer",
        "importPath": "database.serializers",
        "description": "database.serializers",
        "isExtraImport": true,
        "detail": "database.serializers",
        "documentation": {}
    },
    {
        "label": "JSONRenderer",
        "importPath": "rest_framework.renderers",
        "description": "rest_framework.renderers",
        "isExtraImport": true,
        "detail": "rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "TaskModelViewSet",
        "importPath": "database.views",
        "description": "database.views",
        "isExtraImport": true,
        "detail": "database.views",
        "documentation": {}
    },
    {
        "label": "UserModelViewSet",
        "importPath": "database.views",
        "description": "database.views",
        "isExtraImport": true,
        "detail": "database.views",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "JWTAuthentication",
        "importPath": "rest_framework_simplejwt.authentication",
        "description": "rest_framework_simplejwt.authentication",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.authentication",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Backend.database.migrations.0001_initial",
        "description": "Backend.database.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UserModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "Backend.database.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Backend.database.migrations.0002_alter_taskmodel_priority_alter_taskmodel_status",
        "description": "Backend.database.migrations.0002_alter_taskmodel_priority_alter_taskmodel_status",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"database\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"taskmodel\",\n            name=\"priority\",\n            field=models.CharField(\n                choices=[(\"low\", \"Low\"), (\"medium\", \"Medium\"), (\"high\", \"High\")],",
        "detail": "Backend.database.migrations.0002_alter_taskmodel_priority_alter_taskmodel_status",
        "documentation": {}
    },
    {
        "label": "TaskModel",
        "kind": 6,
        "importPath": "Backend.database.models.TaskModel",
        "description": "Backend.database.models.TaskModel",
        "peekOfCode": "class TaskModel(models.Model):\n    title = models.CharField(max_length=255)\n    description = models.TextField()\n    status = models.CharField(max_length=255, choices=StatusChoices, default=\"pending\")\n    priority = models.CharField(max_length=255, choices=PriorityChoices, default=\"low\")\n    dueDate = models.DateField()\n    assignee = models.ForeignKey(\"database.UserModel\", on_delete=models.CASCADE)",
        "detail": "Backend.database.models.TaskModel",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "Backend.database.models.UserModel",
        "description": "Backend.database.models.UserModel",
        "peekOfCode": "class UserManager(BaseUserManager):\n    def create_user(self, username, email, full_name, password=None, role=\"user\"):\n        if not email:\n            raise ValueError(\"Users must have an email address\")\n        if not username:\n            raise ValueError(\"Users must have a username\")\n        email = self.normalize_email(email)\n        user = self.model(username=username, email=email, full_name=full_name, role=role)\n        user.set_password(password)\n        user.save(using=self._db)",
        "detail": "Backend.database.models.UserModel",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 6,
        "importPath": "Backend.database.models.UserModel",
        "description": "Backend.database.models.UserModel",
        "peekOfCode": "class UserModel(AbstractBaseUser, PermissionsMixin):\n    ROLE_CHOICES = [\n        (\"user\", \"User\"),\n        (\"admin\", \"Admin\"),\n        (\"manager\", \"Manager\"),\n    ]\n    profile_picture = models.ImageField(upload_to=user_profile_picture_path, null=True, blank=True)\n    username = models.CharField(max_length=150, unique=True)\n    email = models.EmailField(unique=True)\n    full_name = models.CharField(max_length=255)",
        "detail": "Backend.database.models.UserModel",
        "documentation": {}
    },
    {
        "label": "TaskModelSerializer",
        "kind": 6,
        "importPath": "Backend.database.serializers.TaskSerializer",
        "description": "Backend.database.serializers.TaskSerializer",
        "peekOfCode": "class TaskModelSerializer(serializers.ModelSerializer):\n    assignee = serializers.SerializerMethodField()\n    # Accept `assignee` as object from frontend\n    assignee_obj = serializers.DictField(write_only=True, required=False)\n    class Meta:\n        model = TaskModel\n        fields = '__all__'\n    def get_assignee(self, obj):\n        \"\"\"Return assignee as label/value object.\"\"\"\n        if obj.assignee:",
        "detail": "Backend.database.serializers.TaskSerializer",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "Backend.database.serializers.UserSerializers",
        "description": "Backend.database.serializers.UserSerializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UserModel\n        fields = ['id', 'username', 'email', 'full_name', 'role', 'profile_picture']\nclass UserAutocompleteSerializer(serializers.ModelSerializer):\n    label = serializers.SerializerMethodField()\n    value = serializers.IntegerField(source='id')\n    class Meta:\n        model = UserModel\n        fields = ['label', 'value']",
        "detail": "Backend.database.serializers.UserSerializers",
        "documentation": {}
    },
    {
        "label": "UserAutocompleteSerializer",
        "kind": 6,
        "importPath": "Backend.database.serializers.UserSerializers",
        "description": "Backend.database.serializers.UserSerializers",
        "peekOfCode": "class UserAutocompleteSerializer(serializers.ModelSerializer):\n    label = serializers.SerializerMethodField()\n    value = serializers.IntegerField(source='id')\n    class Meta:\n        model = UserModel\n        fields = ['label', 'value']\n    def get_label(self, obj):\n        return str(obj)\nclass UserProfilePictureSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "Backend.database.serializers.UserSerializers",
        "documentation": {}
    },
    {
        "label": "UserProfilePictureSerializer",
        "kind": 6,
        "importPath": "Backend.database.serializers.UserSerializers",
        "description": "Backend.database.serializers.UserSerializers",
        "peekOfCode": "class UserProfilePictureSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UserModel\n        fields = [\"profile_picture\"]",
        "detail": "Backend.database.serializers.UserSerializers",
        "documentation": {}
    },
    {
        "label": "TaskPagination",
        "kind": 6,
        "importPath": "Backend.database.views.TaskView",
        "description": "Backend.database.views.TaskView",
        "peekOfCode": "class TaskPagination(PageNumberPagination):\n    page_size = 10\n    page_size_query_param = \"page_size\"\n    max_page_size = 100\n    def get_page_size(self, request):\n        page_size = request.query_params.get(self.page_size_query_param)\n        if page_size == 'all':\n            return None  # disables pagination, returns all\n        return super().get_page_size(request)\nclass TaskModelViewSet(viewsets.ModelViewSet):",
        "detail": "Backend.database.views.TaskView",
        "documentation": {}
    },
    {
        "label": "TaskModelViewSet",
        "kind": 6,
        "importPath": "Backend.database.views.TaskView",
        "description": "Backend.database.views.TaskView",
        "peekOfCode": "class TaskModelViewSet(viewsets.ModelViewSet):\n    queryset = TaskModel.objects.all().order_by(\"-dueDate\")\n    serializer_class = TaskModelSerializer\n    pagination_class = TaskPagination\n    # Enable filtering, searching, ordering\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    # Filters\n    filterset_fields = [\"status\", \"priority\", \"assignee\"]\n    search_fields = [\"title\", \"description\"]\n    ordering_fields = [\"dueDate\", \"priority\", \"status\"]",
        "detail": "Backend.database.views.TaskView",
        "documentation": {}
    },
    {
        "label": "UserModelViewSet",
        "kind": 6,
        "importPath": "Backend.database.views.UserView",
        "description": "Backend.database.views.UserView",
        "peekOfCode": "class UserModelViewSet(viewsets.ModelViewSet):\n    queryset = UserModel.objects.all()\n    serializer_class = UserSerializer\n    permission_classes=[IsAuthenticated]\n    @action(detail=False, methods=[\"get\"], url_path=\"autocomplete\")\n    def autocomplete(self, request):\n        search = request.query_params.get(\"search\", \"\")\n        queryset = self.get_queryset().filter(\n            Q(username__icontains=search) |\n            Q(full_name__icontains=search) |",
        "detail": "Backend.database.views.UserView",
        "documentation": {}
    },
    {
        "label": "DatabaseConfig",
        "kind": 6,
        "importPath": "Backend.database.apps",
        "description": "Backend.database.apps",
        "peekOfCode": "class DatabaseConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'database'",
        "detail": "Backend.database.apps",
        "documentation": {}
    },
    {
        "label": "StatusChoices",
        "kind": 6,
        "importPath": "Backend.database.constants",
        "description": "Backend.database.constants",
        "peekOfCode": "class StatusChoices(models.TextChoices):\n    PENDING = \"pending\", \"Pending\"\n    IN_PROGRESS = \"in-progress\", \"In Progress\"\n    COMPLETED = \"completed\", \"Completed\"\nclass PriorityChoices(models.TextChoices):\n    LOW = \"low\", \"Low\"\n    MEDIUM = \"medium\", \"Medium\"\n    HIGH = \"high\", \"High\"",
        "detail": "Backend.database.constants",
        "documentation": {}
    },
    {
        "label": "PriorityChoices",
        "kind": 6,
        "importPath": "Backend.database.constants",
        "description": "Backend.database.constants",
        "peekOfCode": "class PriorityChoices(models.TextChoices):\n    LOW = \"low\", \"Low\"\n    MEDIUM = \"medium\", \"Medium\"\n    HIGH = \"high\", \"High\"",
        "detail": "Backend.database.constants",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "Backend.database.urls",
        "description": "Backend.database.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'tasks', TaskModelViewSet)\nrouter.register(r'users', UserModelViewSet)\nurlpatterns = [\n    path('api/', include(router.urls)),\n]",
        "detail": "Backend.database.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Backend.database.urls",
        "description": "Backend.database.urls",
        "peekOfCode": "urlpatterns = [\n    path('api/', include(router.urls)),\n]",
        "detail": "Backend.database.urls",
        "documentation": {}
    },
    {
        "label": "user_profile_picture_path",
        "kind": 2,
        "importPath": "Backend.database.utils",
        "description": "Backend.database.utils",
        "peekOfCode": "def user_profile_picture_path(instance, filename):\n    return f'user_{instance.id}/profile/{filename}'",
        "detail": "Backend.database.utils",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.asgi",
        "description": "Backend.TaskManagerApi.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "Backend.TaskManagerApi.asgi",
        "documentation": {}
    },
    {
        "label": "CookieJWTAuthentication",
        "kind": 6,
        "importPath": "Backend.TaskManagerApi.authentication",
        "description": "Backend.TaskManagerApi.authentication",
        "peekOfCode": "class CookieJWTAuthentication(JWTAuthentication):\n    def authenticate(self, request):\n        raw_token = request.COOKIES.get(\"access\")\n        print(\"raw_token\",raw_token)\n        if raw_token is None:\n            return None\n        validated_token = self.get_validated_token(raw_token)\n        return self.get_user(validated_token), validated_token",
        "detail": "Backend.TaskManagerApi.authentication",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-gudc4!@si@y(pfpl0ytsp_z16d@(zr91xojz+t#$%q6q8vi!%z'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS=[\n    '127.0.0.1',\n]",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-gudc4!@si@y(pfpl0ytsp_z16d@(zr91xojz+t#$%q6q8vi!%z'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS=[\n    '127.0.0.1',\n]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS=[\n    '127.0.0.1',\n]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    \"corsheaders\",\n    'database',\n    'rest_framework',",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",  # must be first\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "ROOT_URLCONF = 'TaskManagerApi.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "WSGI_APPLICATION = 'TaskManagerApi.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'database.UserModel'\n# Internationalization\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    \"DEFAULT_FILTER_BACKENDS\": [",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    \"DEFAULT_FILTER_BACKENDS\": [\n        \"django_filters.rest_framework.DjangoFilterBackend\"",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    \"DEFAULT_FILTER_BACKENDS\": [\n        \"django_filters.rest_framework.DjangoFilterBackend\"\n    ],\n    \"DEFAULT_RENDERER_CLASSES\": [\n        \"rest_framework.renderers.JSONRenderer\",",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    \"DEFAULT_FILTER_BACKENDS\": [\n        \"django_filters.rest_framework.DjangoFilterBackend\"\n    ],\n    \"DEFAULT_RENDERER_CLASSES\": [\n        \"rest_framework.renderers.JSONRenderer\",\n        \"rest_framework.renderers.BrowsableAPIRenderer\",  # optional",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(seconds=10),  # ⏱ change to your desired duration\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),     # ⏱ change as needed\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,\n    'AUTH_HEADER_TYPES': ('Bearer',),\n}\nCORS_ALLOWED_ORIGINS = [",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    'http://localhost:5173',\n]\nCORS_ALLOW_CREDENTIALS = True\n# CSRF (if you want to add CSRF protection later)\nCSRF_COOKIE_SECURE = True\nSESSION_COOKIE_SECURE = True",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\n# CSRF (if you want to add CSRF protection later)\nCSRF_COOKIE_SECURE = True\nSESSION_COOKIE_SECURE = True",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_COOKIE_SECURE",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "CSRF_COOKIE_SECURE = True\nSESSION_COOKIE_SECURE = True",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_COOKIE_SECURE",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.settings",
        "description": "Backend.TaskManagerApi.settings",
        "peekOfCode": "SESSION_COOKIE_SECURE = True",
        "detail": "Backend.TaskManagerApi.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.urls",
        "description": "Backend.TaskManagerApi.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include('database.urls')),\n    path('admin/', admin.site.urls),\n    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "Backend.TaskManagerApi.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "Backend.TaskManagerApi.wsgi",
        "description": "Backend.TaskManagerApi.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "Backend.TaskManagerApi.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Backend.manage",
        "description": "Backend.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'TaskManagerApi.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "Backend.manage",
        "documentation": {}
    },
    {
        "label": "delete_files",
        "kind": 2,
        "importPath": "Backend.rm_cache",
        "description": "Backend.rm_cache",
        "peekOfCode": "def delete_files(base_dir):\n    # Regular expression to match filenames that start with four digits\n    digit_pattern = re.compile(r'^\\d{4}')\n    # Delete sqllite3\n    os.remove(os.path.join(base_dir, 'db.sqlite3'))\n    for root, dirs, files in os.walk(base_dir):\n        # Delete Python cache files\n        for file in files:\n            if file.endswith('.pyc') or file == '__pycache__':\n                file_path = os.path.join(root, file)",
        "detail": "Backend.rm_cache",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "FrontEnd.node_modules.flatted.python.flatted",
        "description": "FrontEnd.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "FrontEnd.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "FrontEnd.node_modules.flatted.python.flatted",
        "description": "FrontEnd.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "FrontEnd.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "FrontEnd.node_modules.flatted.python.flatted",
        "description": "FrontEnd.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "FrontEnd.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "FrontEnd.node_modules.flatted.python.flatted",
        "description": "FrontEnd.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "FrontEnd.node_modules.flatted.python.flatted",
        "documentation": {}
    }
]